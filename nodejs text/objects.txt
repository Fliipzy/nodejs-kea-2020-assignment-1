:: Objects ::

An object in JavaScript is a datastructure that contains key value pairs.
Objects are reference types, that differs from variables which are value types.
Value types are stored on the stack memory. That means the variable
now holds a value directly.
Reference types has a pointer (address value) stored on the stack, 'pointing' to
the address in heap memory where it's values are stored.

Reference vs value types will be described further below.


You can define an object by using the object literal syntax:

	const myObj = {
		name: 'John Doe',
		age: 47,
		hobby: 'JavaScript'
	}

We can now access the values inside 'myObj' by using the dot notation or brackets:

	//With dot notation
	console.log(myObj.name); //John doe
	console.log(myObj.age); //47
	
	//With brackets
	console.log(myObj['name']); //John doe
	console.log(myObj['age']); //47
	
Objects can also have functions as values:
	
	const myObj = {
		name: 'John Doe',
		age: 47,
		hobby: 'JavaScript',
		favFunc: function() {
			console.log('Hello, World!');
		}
	}
	
	myObj.favFunc(); //Hello, World!
	
__Pass by reference vs value__

As already described, reference and value types are treated different when stored in memory.
Another place they're different is how they're passed and changed inside functions.

To demonstrate this, heres a function that takes in a number and increments it's value:

	function addOne(number) {
		number += 1;
	}
	
	let x = 1;
	addOne(x);
	
	console.log(x); //1
	
It's understandable that a lot of people, who doesn't know about ref vs value passing, 
would expect x's value to be 2 at the end. It's still 1 because x is passed 
to the addOne function as a value.

That means when the program has been interpreted, it's actually the number 1,
that's being passed, no reference to x whatsoever:

	function addOne(number) {
		number += 1;
	}
	
	let x = 1;
	addOne(1); //<-- What really happens
	
	console.log(x); //1

Objects can however, be passed into functions and have their values changed:

	function addOneToObj(obj) {
		obj.value += 1;
	}

	let myObj = {
		value : 1
	}
	
	addOneToObj(myObj);
	console.log(myObj.value); //2
	
This is again because our object is now being passed as a reference. Essentially that
means the parameter obj in our addOneToObj function acts as a pointer to the object
in memory.


