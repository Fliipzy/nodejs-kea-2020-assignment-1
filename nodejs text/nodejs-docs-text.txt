:: Modules ::
 
Modules in Node.js can be considered to be like javascript libraries.
They can be included in your node projects, thereby making it's set of functions
available to be called.

Therefor modules are necessary, in case you want to execute code from another .js file.

_How to include modules?_

In order to include a module in your project you use the require() function. It takes
in the name of the module as a parameter.

Heres an example, where our own math module is being included:

// const math = require('MyMathModule');

Notice that the require function returns an object that we store in a variable.
We can now call the functions from the module by using our variable 'math',
like so:

// math.addTwoNumbers(3, 5);

_How to create modules?_

You can create your own modules by using the keyword 'exports'.
The example below shows the creation of our math module:

// exports.addTwoNumbers(num1, num2) {
// 	return num1 + num2;
// };


_Built in node modules_

Node already comes prepacked with 'built-in modules' such as the http module for 
hosting web servers and serving content. In fact, node comes with many built-in
modules, such as 'zlib' for compressing and decompressing, 'path' to handle file paths,
'util' for accessing utility functions and so much more. For a greater list of
built in modules, please see <a href="https://www.w3schools.com/nodejs/ref_modules.asp">this</a>.




:: NPM ::

Node Package Manager (NPM), is a package manager program for Node.js.
You specify what package or module you want and NPM downloads and installs that for you.
NPM also consists of their website, <a href="https://www.npmjs.com/">npmjs.com</a>, that's
the large registry of JavaScript software that NPM downloads for you through the CLI program.

_Using NPM_
Using NPM is pretty straight forward, open your command line and type 'npm'.
From here there's a lot of commands available, but for this example we're only going to use
the install command and specify the package name.

//C:\Users\Your name\MyProject>npm install <package name>

Note that the command above will install the package locally into your project folder, not globally.
If you want to install a program through NPM globally, you use the flag -g for global.
In the next example we're going to install a program called nodemon globally. 
Nodemon helps you speed up the development of your project by automatically restarting the node application when a file changes in your project directory.

// npm install -g nodemon

Installing nodemon globally will set a system variable on your system path, making the program available to call from anywhere on your machine.

We can now use nodemon kinda like node: 

// nodemon app.js



:: jQuery ::

jQuery is a very popular JavaScript library, containing a vast amount of functions.
Many of it's functions are for traversing HTML documents and manipulating them in various ways.
It also makes things such as Ajax calls, a lot simpler than before. 
Here's a Ajax call before and after jQuery:

function loadXMLDoc() {
    var xmlhttp = new XMLHttpRequest();

    xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState == XMLHttpRequest.DONE) {
           if (xmlhttp.status == 200) {
               document.getElementById("myDiv").innerHTML = xmlhttp.responseText;
           }
           else if (xmlhttp.status == 400) {
              alert('There was an error 400');
           }
           else {
               alert('something else other than 200 was returned');
           }
        }
    };

    xmlhttp.open("GET", "ajax_info.txt", true);
    xmlhttp.send();
}

And with jQuery:

$.ajax({
    url: "test.html",
    context: document.body,
    success: function(){
      $(this).addClass("done");
    }
});




 




