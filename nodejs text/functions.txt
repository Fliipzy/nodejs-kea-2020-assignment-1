:: Functions ::

A function in JavaScript is a block of code, that can take input and 
return an output, like most other programming languages.

	function concatStrings(text1, text2) {
		return text1 + text2;
	}

The code inside a function can be executed by invoking (calling) the function:

	let x = 'Hello, ';
	let y = 'World!';
	
	let result = concatStrings(x, y);
	
	console.log(result) //Hello, World!

__Higher order functions__

JavaScript supports higher order functions, that means functions that
can take in other functions as arguments or return functions.

	function runFunc(func) {
		func();
	}
	
runFunc can now run another function, by invoking runFunc:

	function greet() {
		console.log('Hello, world!');
	}
	
	function runFunc(func) {
		func();
	}
	
	runFunc(greet); //Hello, World!
	
We can also call runFunc by passing it an anonymous function:

	runFunc(function() {
		console.log('anonymous!');
	}); 
	//anonymous!
	
They're called anonymous because they haven't got a name.
	
__Callbacks__

Callbacks are functions that are invoked when something else happens.
So wether the function runs or not is determined by the other thing happening.

	function callBackAfterMilliSecs(callback, ms) {
		setTimeout(callback, ms)
	}
	
	callBackAfterMilliSecs(function () {
		console.log('Two seconds has passed!');
	}, 2000);

Heres a callback function which execution relies on an input value:

	function callBackIfValueGreatEnough(callback, value) {
		if (value > 3) {
			callback();
			return;
		}
		console.log("Value wasn't greater than 3!")
	}

__Inner functions__

JavaScript supports inner functions too, meaning functions inside functions.

	function outer(num1) {
		let value = 10;
		function inner(num2) {
			console.log(num1 + num2);
		}
		inner(value);
	}
	
	outer(5); //15
	
